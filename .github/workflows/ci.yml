name: CI (Compose + E2E)

on:
  push:
    branches: [ main, master ]
  pull_request:

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    env:
      POSTGRES_DB: appdb
      POSTGRES_USER: appuser
      POSTGRES_PASSWORD: appsecret
      DATABASE_URL: postgresql+psycopg2://appuser:appsecret@db:5432/appdb

      # Nginx on 8080 in CI (override file maps 8080->80)
      NGINX_HOST_PORT: 8080
      BACKEND_CHECK_PATH: "/api/ping"

    steps:
      - uses: actions/checkout@v4

      - name: Create CI compose override (map 8080->80)
        run: |
          cat > ci.compose.override.yml << 'EOF'
          services:
            nginx:
              ports:
                - "8080:80"
          EOF

      - name: Compose Up (with override)
        run: docker compose -f docker-compose.yml -f ci.compose.override.yml up -d --build

      - name: Wait for Nginx /healthz (max ~5min)
        shell: bash
        run: |
          set -euo pipefail
          for i in {1..180}; do
            if curl -fsS "http://localhost:${NGINX_HOST_PORT}/healthz" >/dev/null; then
              echo "Nginx is up on ${NGINX_HOST_PORT}"; exit 0
            fi
            echo "[$i/180] waiting for nginx on port ${NGINX_HOST_PORT} ..." && sleep 2
          done
          echo "Nginx did not become ready in time" >&2
          exit 1

      - name: Run E2E smoke test (nginx -> backend -> postgres)
        run: bash tests/smoke_test.sh

      # ---- only on failure: collect logs + email + artifact ----
      - name: Collect diagnostics (compose logs -> file)
        if: failure()
        shell: bash
        run: |
          set +e
          echo "=== docker ps ===" > compose-logs.txt
          docker ps -a >> compose-logs.txt 2>&1
          echo -e "\n=== compose ps ===" >> compose-logs.txt
          docker compose -f docker-compose.yml -f ci.compose.override.yml ps >> compose-logs.txt 2>&1
          echo -e "\n=== backend logs (last 400) ===" >> compose-logs.txt
          docker compose -f docker-compose.yml -f ci.compose.override.yml logs --tail=400 backend >> compose-logs.txt 2>&1
          echo -e "\n=== nginx logs (last 200) ===" >> compose-logs.txt
          docker compose -f docker-compose.yml -f ci.compose.override.yml logs --tail=200 nginx >> compose-logs.txt 2>&1
          echo -e "\n=== db logs (last 200) ===" >> compose-logs.txt
          docker compose -f docker-compose.yml -f ci.compose.override.yml logs --tail=200 db >> compose-logs.txt 2>&1
          tail -c 1000000 compose-logs.txt > compose-logs.trim.txt || true

      - name: Email me on failure (with logs)
        if: failure()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_HOST }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          to: ${{ secrets.MAIL_TO }}
          from: ${{ secrets.MAIL_FROM }}
          secure: true
          convert_markdown: true
          subject: "[CI FAILED] ${{ github.repository }} #${{ github.run_number }} on ${{ github.ref_name }}"
          body: |
            ❌ CI failed for **${{ github.repository }}** (run #${{ github.run_number }})

            **Branch:** ${{ github.ref_name }}
            **Commit:** ${{ github.sha }}
            **Actor:** ${{ github.actor }}
            **Run URL:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

            Logs file attached (trimmed to ~1MB).
          attachments: compose-logs.trim.txt

      - name: Upload logs artifact
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: compose-logs
          path: compose-logs.txt
      # ----------------------------------------------------------

      - name: Compose Down
        if: always()
        run: docker compose -f docker-compose.yml -f ci.compose.override.yml down -v
  
  docker_publish:
    name: Build & Push images to Docker Hub
    runs-on: ubuntu-latest
    needs: [build-and-test]         # ירוץ רק אם ה־job build-and-test הצליח
    if: ${{ success() }}

    env:
      DOCKER_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/pro_dev

    strategy:
      matrix:
        service:
          - { name: backend,  dockerfile: ./Dockerfile.backend, context: . }
          - { name: frontend, dockerfile: ./nginx/Dockerfile,  context: . }


    steps:
      - name: Checkout same commit
        uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}

      - name: Build frontend assets (npm)
        if: matrix.service.name == 'frontend'
        working-directory: ./frontend
        run: |
          node -v
          npm ci
          npm run build

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build & Push (single repo / multi-tags)
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.service.context }}
          file: ${{ matrix.service.dockerfile }}
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE }}:${{ matrix.service.name }}-latest
            ${{ env.DOCKER_IMAGE }}:${{ matrix.service.name }}-${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

