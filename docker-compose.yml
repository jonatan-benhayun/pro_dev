services:
  db:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 3s
      retries: 20
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks: [appnet]

  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    environment:
      FLASK_DEBUG: "1"
      FLASK_APP: run.py
      DATABASE_URL: ${DATABASE_URL}
      SECRET_KEY: ${SECRET_KEY}
      FLASK_ENV: ${FLASK_ENV}
      DB_INIT_RETRIES: ${DB_INIT_RETRIES}
      DB_INIT_DELAY: ${DB_INIT_DELAY}


    command: bash -lc "flask run --host=0.0.0.0 --port=8000"

    depends_on:
      db:
        condition: service_healthy
    ports:
      - "8000:8000"
    networks: [appnet]
    volumes:
      - ./:/app
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "python - << 'PY'\nimport urllib.request,sys\n" \
          "import time\n" \
          "url='http://localhost:8000/api/ping'\n" \
          "try:\n" \
          "  urllib.request.urlopen(url, timeout=2)\n" \
          "  sys.exit(0)\n" \
          "except Exception:\n" \
          "  sys.exit(1)\nPY"
        ]
      interval: 5s
      timeout: 3s
      retries: 60



  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      backend:
        condition: service_healthy
    networks: [appnet]

volumes:
  pgdata:

networks:
  appnet:
    driver: bridge
