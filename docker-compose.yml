services:
  db:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL","pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 5s
      timeout: 3s
      retries: 30
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks: [appnet]

  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    working_dir: /app
    environment:
      DATABASE_URL: ${DATABASE_URL}
      SECRET_KEY: ${SECRET_KEY}
      FLASK_ENV: ${FLASK_ENV}
    # מריץ gunicorn (זהה ל-CMD שבתמונה; משאירים כאן לנראות)
    command: ["gunicorn","-w","2","-b","0.0.0.0:8000","wsgi:app"]
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "8000"
    # במקומי: נוח להשאיר mount. ב-CI גם עובד.
    volumes:
      - ./:/app
    healthcheck:
      test: ["CMD-SHELL","python -c 'import urllib.request,sys; urllib.request.urlopen(\"http://localhost:8000/api/ping\", timeout=3); sys.exit(0)' || exit 1"]
      interval: 5s
      timeout: 3s
      retries: 60
    networks: [appnet]

  nginx:
    image: nginx:alpine
    ports:
      - "${NGINX_HOST_PORT:-8000}:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      backend:
        condition: service_healthy
    networks: [appnet]

volumes:
  pgdata: {}

networks:
  appnet:
    driver: bridge
