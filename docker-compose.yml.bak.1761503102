services:
  db:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 3s
      retries: 20
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks: [appnet]

  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    working_dir: /app                # ← ודאות איפה נמצאים הקבצים
    environment:
      FLASK_DEBUG: "1"
      FLASK_APP: wsgi.py             # ← להשתמש ב-wsgi.py (יש לך קובץ כזה)
      DATABASE_URL: ${DATABASE_URL}
      SECRET_KEY: ${SECRET_KEY}
      FLASK_ENV: ${FLASK_ENV}
      DB_INIT_RETRIES: ${DB_INIT_RETRIES}
      DB_INIT_DELAY: ${DB_INIT_DELAY}
    command: python -m flask run --host=0.0.0.0 --port=8000  # ← בלי bash
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "8000:8000"
    volumes:
      - ./:/app
      healthcheck:
    test: ["CMD-SHELL", "python -c \"import urllib.request,sys; urllib.request.urlopen('http://localhost:8000/api/ping', timeout=2); sys.exit(0)\""]
    interval: 5s
    timeout: 3s
    retries: 60





  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      backend:
        condition: service_healthy
    networks: [appnet]

volumes:
  pgdata:

networks:
  appnet:
    driver: bridge
